// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: house/house.proto

package house

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HouseClient is the client API for House service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HouseClient interface {
	PubHouse(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	UploadHouseImg(ctx context.Context, in *ImgReq, opts ...grpc.CallOption) (*ImgResp, error)
	GetHouseInfo(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
	GetHouseDetail(ctx context.Context, in *DetailReq, opts ...grpc.CallOption) (*DetailResp, error)
	GetIndexHouse(ctx context.Context, in *IndexReq, opts ...grpc.CallOption) (*GetResp, error)
	SearchHouse(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*GetResp, error)
}

type houseClient struct {
	cc grpc.ClientConnInterface
}

func NewHouseClient(cc grpc.ClientConnInterface) HouseClient {
	return &houseClient{cc}
}

func (c *houseClient) PubHouse(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/house.House/PubHouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseClient) UploadHouseImg(ctx context.Context, in *ImgReq, opts ...grpc.CallOption) (*ImgResp, error) {
	out := new(ImgResp)
	err := c.cc.Invoke(ctx, "/house.House/UploadHouseImg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseClient) GetHouseInfo(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := c.cc.Invoke(ctx, "/house.House/GetHouseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseClient) GetHouseDetail(ctx context.Context, in *DetailReq, opts ...grpc.CallOption) (*DetailResp, error) {
	out := new(DetailResp)
	err := c.cc.Invoke(ctx, "/house.House/GetHouseDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseClient) GetIndexHouse(ctx context.Context, in *IndexReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := c.cc.Invoke(ctx, "/house.House/GetIndexHouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseClient) SearchHouse(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := c.cc.Invoke(ctx, "/house.House/SearchHouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HouseServer is the server API for House service.
// All implementations must embed UnimplementedHouseServer
// for forward compatibility
type HouseServer interface {
	PubHouse(context.Context, *Request) (*Response, error)
	UploadHouseImg(context.Context, *ImgReq) (*ImgResp, error)
	GetHouseInfo(context.Context, *GetReq) (*GetResp, error)
	GetHouseDetail(context.Context, *DetailReq) (*DetailResp, error)
	GetIndexHouse(context.Context, *IndexReq) (*GetResp, error)
	SearchHouse(context.Context, *SearchReq) (*GetResp, error)
	mustEmbedUnimplementedHouseServer()
}

// UnimplementedHouseServer must be embedded to have forward compatible implementations.
type UnimplementedHouseServer struct {
}

func (UnimplementedHouseServer) PubHouse(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubHouse not implemented")
}
func (UnimplementedHouseServer) UploadHouseImg(context.Context, *ImgReq) (*ImgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadHouseImg not implemented")
}
func (UnimplementedHouseServer) GetHouseInfo(context.Context, *GetReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHouseInfo not implemented")
}
func (UnimplementedHouseServer) GetHouseDetail(context.Context, *DetailReq) (*DetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHouseDetail not implemented")
}
func (UnimplementedHouseServer) GetIndexHouse(context.Context, *IndexReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexHouse not implemented")
}
func (UnimplementedHouseServer) SearchHouse(context.Context, *SearchReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchHouse not implemented")
}
func (UnimplementedHouseServer) mustEmbedUnimplementedHouseServer() {}

// UnsafeHouseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HouseServer will
// result in compilation errors.
type UnsafeHouseServer interface {
	mustEmbedUnimplementedHouseServer()
}

func RegisterHouseServer(s grpc.ServiceRegistrar, srv HouseServer) {
	s.RegisterService(&House_ServiceDesc, srv)
}

func _House_PubHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServer).PubHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/house.House/PubHouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServer).PubHouse(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _House_UploadHouseImg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServer).UploadHouseImg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/house.House/UploadHouseImg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServer).UploadHouseImg(ctx, req.(*ImgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _House_GetHouseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServer).GetHouseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/house.House/GetHouseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServer).GetHouseInfo(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _House_GetHouseDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServer).GetHouseDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/house.House/GetHouseDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServer).GetHouseDetail(ctx, req.(*DetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _House_GetIndexHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServer).GetIndexHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/house.House/GetIndexHouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServer).GetIndexHouse(ctx, req.(*IndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _House_SearchHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseServer).SearchHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/house.House/SearchHouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseServer).SearchHouse(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

// House_ServiceDesc is the grpc.ServiceDesc for House service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var House_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "house.House",
	HandlerType: (*HouseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PubHouse",
			Handler:    _House_PubHouse_Handler,
		},
		{
			MethodName: "UploadHouseImg",
			Handler:    _House_UploadHouseImg_Handler,
		},
		{
			MethodName: "GetHouseInfo",
			Handler:    _House_GetHouseInfo_Handler,
		},
		{
			MethodName: "GetHouseDetail",
			Handler:    _House_GetHouseDetail_Handler,
		},
		{
			MethodName: "GetIndexHouse",
			Handler:    _House_GetIndexHouse_Handler,
		},
		{
			MethodName: "SearchHouse",
			Handler:    _House_SearchHouse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "house/house.proto",
}
