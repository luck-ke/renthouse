// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: userOrder/userOrder.proto

package userOrder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserOrderClient is the client API for UserOrder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserOrderClient interface {
	CreateOrder(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetOrderInfo(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
	UpdateStatus(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error)
}

type userOrderClient struct {
	cc grpc.ClientConnInterface
}

func NewUserOrderClient(cc grpc.ClientConnInterface) UserOrderClient {
	return &userOrderClient{cc}
}

func (c *userOrderClient) CreateOrder(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/go.micro.srv.userOrder.UserOrder/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOrderClient) GetOrderInfo(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := c.cc.Invoke(ctx, "/go.micro.srv.userOrder.UserOrder/GetOrderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOrderClient) UpdateStatus(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := c.cc.Invoke(ctx, "/go.micro.srv.userOrder.UserOrder/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserOrderServer is the server API for UserOrder service.
// All implementations must embed UnimplementedUserOrderServer
// for forward compatibility
type UserOrderServer interface {
	CreateOrder(context.Context, *Request) (*Response, error)
	GetOrderInfo(context.Context, *GetReq) (*GetResp, error)
	UpdateStatus(context.Context, *UpdateReq) (*UpdateResp, error)
	mustEmbedUnimplementedUserOrderServer()
}

// UnimplementedUserOrderServer must be embedded to have forward compatible implementations.
type UnimplementedUserOrderServer struct {
}

func (UnimplementedUserOrderServer) CreateOrder(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedUserOrderServer) GetOrderInfo(context.Context, *GetReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderInfo not implemented")
}
func (UnimplementedUserOrderServer) UpdateStatus(context.Context, *UpdateReq) (*UpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedUserOrderServer) mustEmbedUnimplementedUserOrderServer() {}

// UnsafeUserOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserOrderServer will
// result in compilation errors.
type UnsafeUserOrderServer interface {
	mustEmbedUnimplementedUserOrderServer()
}

func RegisterUserOrderServer(s grpc.ServiceRegistrar, srv UserOrderServer) {
	s.RegisterService(&UserOrder_ServiceDesc, srv)
}

func _UserOrder_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOrderServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.userOrder.UserOrder/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOrderServer).CreateOrder(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOrder_GetOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOrderServer).GetOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.userOrder.UserOrder/GetOrderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOrderServer).GetOrderInfo(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOrder_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOrderServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.userOrder.UserOrder/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOrderServer).UpdateStatus(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserOrder_ServiceDesc is the grpc.ServiceDesc for UserOrder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserOrder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.userOrder.UserOrder",
	HandlerType: (*UserOrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _UserOrder_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrderInfo",
			Handler:    _UserOrder_GetOrderInfo_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _UserOrder_UpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userOrder/userOrder.proto",
}
